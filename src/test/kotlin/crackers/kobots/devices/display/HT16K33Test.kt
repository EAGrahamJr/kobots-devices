/*
 * Copyright 2022-2023 by E. A. Graham, Jr.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

package crackers.kobots.devices.display

import crackers.kobots.devices.MockI2CDevice
import crackers.kobots.devices.clearBeforeTest
import io.kotest.core.spec.style.FunSpec
import io.kotest.matchers.shouldBe
import crackers.kobots.devices.MockI2CDevice.requests as mockRequests

class HT16K33Test : FunSpec({
    clearBeforeTest()

    val display = object : HT16K33(listOf(MockI2CDevice.device)) {}.apply {
        autoShow = false
    }

    val data = listOf(
        listOf(0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00),
        listOf(0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00),
        listOf(0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00),
        listOf(0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00),
        listOf(0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00),
        listOf(0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00),
        listOf(0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00),
        listOf(0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00),
        listOf(0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01)
    )

    /**
     * Test the output by putting a pixel in each of 8 rows and columns and verifying the output against data
     * captured from the Adafruit driver.
     */
    context("Write 8 pixels to 8 rows") {

        for (x in 0..7) {
            test("Row $x") {
                mockRequests.clear()
                for (y in 0..7) {
                    display.pixel(x, y, true)
                }
                display.show()
                // quickie translate to bytes because Kotlin is so picky about this
                val bytes = data[x].map { it.toByte() }.toByteArray()
                mockRequests shouldBe bytes
                display.fill(false)
                display.show()
            }
        }
    }
})
